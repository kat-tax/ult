# Android Build & Deploy
platform :android do
  # For android, you should setup signing for release builds.
  # Currently, the default debug keystore is used. 
  desc 'Build the staging release APK.'
  private_lane :build_staging do
    gradle(task: 'clean', project_dir: 'android/')
    sh("npm", "run", "make-apk:stagingRelease")
  end

  desc 'Build the production release APK.'
  private_lane :build_production do
    gradle(task: 'clean', project_dir: 'android/')
    sh("npm", "run", "make-apk:productionRelease")
  end

  desc 'Upload the release APK to App Center.'
  private_lane :upload do |options|
    release_notes = options[:notes]
    appcenter_upload(
      api_token: ENV["APPCENTER_API_TOKEN"],
      owner_name: ENV["APPCENTER_OWNER_NAME"],
      app_name: ENV["APPCENTER_APP_NAME"],
      apk: "./android/app/build/outputs/apk/release/app-release.apk",
      notify_testers: ENV["NOTIFY_TESTERS"],
      destinations: ENV["DESTINATIONS"],
      release_notes: release_notes
    )
  end

  desc 'Build, deploy staging Android.'
  lane :deploy_staging do
    build_staging
    upload
  end

  desc 'Build, deploy production Android.'
  lane :deploy_production do
    build_production
    upload
  end

  desc 'Bump, badge, deploy staging Android.'
  lane :bump_badge_deploy_staging do
    bump_badge
    deploy_staging
  end
  
  desc 'Bump, badge, deploy production Android.'
  lane :bump_badge_deploy_prod do
    bump_badge
    deploy_production
  end
end

# iOS Sign, Build & Deploy
platform :ios do
  desc 'Set up certs and profiles for iOS.'
  lane :certificates do
    register_devices(
      devices: {}
    )
    match(
      app_identifier: 'com.app.bundle',
      readonly: true, 
      force_for_new_devices: true, 
    )
  end

  desc 'Build the staging release iOS application.'
  private_lane :build_staging do
    package = load_json(json_path: "./package.json")
    gym(
      scheme: "STAGING",
      workspace: './ios/' + package['name'] + '.xcworkspace', 
      export_method: 'ad-hoc'
    )
  end
  
  desc 'Build the production release iOS application.'
  private_lane :build_production do
    package = load_json(json_path: "./package.json")
    gym(
      scheme: "PRODUCTION",
      workspace: './ios/' + package['name'] + '.xcworkspace', 
      export_method: 'ad-hoc'
    )
  end
  

  desc 'Upload the release IPA to App Center.'
  private_lane :upload do |options|
    release_notes = options[:notes]
    appcenter_upload(
      api_token: ENV["APPCENTER_API_TOKEN"],
      owner_name: ENV["APPCENTER_OWNER_NAME"],
      app_name: ENV["APPCENTER_APP_NAME"],
      ipa: "./" + "Hello App Display Name" + ".ipa",
      notify_testers: ENV["NOTIFY_TESTERS"],
      destinations: ENV["DESTINATIONS"],
      release_notes: release_notes
    )
  end

  desc 'Sign, build, deploy staging iOS.'
  lane :deploy_staging do
    certificates
    build_staging
    upload
  end

  desc 'Sign, build, deploy production iOS.'
  lane :deploy_production do
    certificates
    build_production
    upload
  end

  desc 'Bump, badge, sign, build, deploy staging iOS.'
  lane :bump_badge_deploy_staging do
    bump_badge
    deploy_staging
  end
  
  desc 'Bump, badge, sign, build, deploy production iOS.'
  lane :bump_badge_deploy_prod do
    bump_badge
    deploy_production
  end
end

# Icons & Versioning
desc 'Android: Increment versionCode and set versionName to package.json version.'
package = load_json(json_path: "./package.json")
private_lane :inc_ver_and do
  increment_version_code(
    gradle_file_path: "./android/app/build.gradle",
  )

  increment_version_name(
    gradle_file_path: "./android/app/build.gradle",
    version_name: package['version']
  )
end

desc 'iOS: Increment build number and set the version to package.json version.'
private_lane :inc_ver_ios do
  increment_build_number(
    xcodeproj: './ios/' + package['name'] + '.xcodeproj'
  )
  increment_version_number(
    xcodeproj: './ios/' + package['name'] + '.xcodeproj',
    version_number: package['version']
  )
end

desc 'Bump build numbers, and set the display version to match the pacakage.json version.'
private_lane :bump do
  inc_ver_ios
  inc_ver_and
end

# To prepare the original icon set, see:
# https://developer.android.com/studio/write/image-asset-studio
desc 'Android: Overwrite the current icon set with a badged version.'
private_lane :make_badge_and do
  package = load_json(json_path: "./package.json")
  add_badge(
    shield: "DEV-" + package['version'] + "-orange", 
    no_badge: true,
    dark: true,
    shield_scale: "0.55",
    shield_gravity: "Center",
    shield_geometry: "+0+30%",
    glob: "/android/app/src/main/res/mipmap-*/ic_launcher*.png",
  )
end

# To prepare the original icon set, you can use:
# https://appicon.co/
desc 'iOS: Overwrite the current icon set with a badged version.'
private_lane :make_badge_ios do
  package = load_json(json_path: "./package.json")
  add_badge(
    shield: "DEV-" + package['version'] + "-orange", 
    no_badge: true,
    dark: true,
    shield_scale: "0.85",
    shield_gravity: "South",
    shield_geometry: "+0+5%",
    glob: "/ios/" + package['name'] + "/Images.xcassets/AppIcon.appiconset/*.png",
  )
end

desc 'Make new versioned icon badges.'
lane :make_badge do
  make_badge_ios
  make_badge_and
end

desc 'Bump and badge iOS and Android.'
lane :bump_badge do
  bump
  make_badge
end
